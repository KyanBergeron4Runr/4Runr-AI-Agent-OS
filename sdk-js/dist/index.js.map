{"version":3,"sources":["../src/errors.ts","../src/utils/correlation.ts","../src/utils/retry.ts","../src/client.ts","../src/utils/idempotency.ts"],"names":["fetch","randomUUID"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * Base error class for all Gateway SDK errors\r\n */\r\nexport class GatewayError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public statusCode?: number,\r\n    public code?: string\r\n  ) {\r\n    super(message)\r\n    this.name = this.constructor.name\r\n  }\r\n}\r\n\r\n/**\r\n * Authentication/authorization errors\r\n */\r\nexport class GatewayAuthError extends GatewayError {\r\n  constructor(message: string, statusCode?: number) {\r\n    super(message, statusCode, 'AUTH_ERROR')\r\n  }\r\n}\r\n\r\n/**\r\n * Policy enforcement errors\r\n */\r\nexport class GatewayPolicyError extends GatewayError {\r\n  constructor(message: string, statusCode?: number) {\r\n    super(message, statusCode, 'POLICY_ERROR')\r\n  }\r\n}\r\n\r\n/**\r\n * Rate limiting errors\r\n */\r\nexport class GatewayRateLimitError extends GatewayError {\r\n  constructor(\r\n    message: string,\r\n    public retryAfter?: number,\r\n    statusCode?: number\r\n  ) {\r\n    super(message, statusCode, 'RATE_LIMIT_ERROR')\r\n  }\r\n}\r\n\r\n/**\r\n * Upstream service errors\r\n */\r\nexport class GatewayUpstreamError extends GatewayError {\r\n  constructor(message: string, statusCode?: number) {\r\n    super(message, statusCode, 'UPSTREAM_ERROR')\r\n  }\r\n}\r\n\r\n/**\r\n * Network/connection errors\r\n */\r\nexport class GatewayNetworkError extends GatewayError {\r\n  constructor(message: string, public originalError?: Error) {\r\n    super(message, undefined, 'NETWORK_ERROR')\r\n  }\r\n}\r\n\r\n/**\r\n * Token-related errors\r\n */\r\nexport class GatewayTokenError extends GatewayError {\r\n  constructor(message: string, statusCode?: number) {\r\n    super(message, statusCode, 'TOKEN_ERROR')\r\n  }\r\n}\r\n\r\n/**\r\n * Utility function to create appropriate error from HTTP response\r\n */\r\nexport function createErrorFromResponse(\r\n  statusCode: number,\r\n  errorMessage: string,\r\n  retryAfter?: string\r\n): GatewayError {\r\n  switch (statusCode) {\r\n    case 401:\r\n    case 403:\r\n      return new GatewayAuthError(errorMessage, statusCode)\r\n    case 429:\r\n      const retryAfterSeconds = retryAfter ? parseInt(retryAfter, 10) : undefined\r\n      return new GatewayRateLimitError(errorMessage, retryAfterSeconds, statusCode)\r\n    case 400:\r\n      if (errorMessage.includes('policy') || errorMessage.includes('scope')) {\r\n        return new GatewayPolicyError(errorMessage, statusCode)\r\n      }\r\n      return new GatewayError(errorMessage, statusCode)\r\n    case 502:\r\n    case 503:\r\n    case 504:\r\n      return new GatewayUpstreamError(errorMessage, statusCode)\r\n    default:\r\n      return new GatewayError(errorMessage, statusCode)\r\n  }\r\n}\r\n","/**\r\n * Generate a unique correlation ID for request tracking\r\n */\r\nexport function generateCorrelationId(): string {\r\n  const timestamp = Date.now()\r\n  const random = Math.random().toString(36).substring(2, 15)\r\n  return `req_${timestamp}_${random}`\r\n}\r\n\r\n/**\r\n * Extract correlation ID from response headers\r\n */\r\nexport function extractCorrelationId(headers: Headers): string | undefined {\r\n  return headers.get('X-Correlation-Id') || undefined\r\n}\r\n","import { GatewayError, GatewayRateLimitError, GatewayUpstreamError } from '../errors'\r\n\r\nexport interface RetryOptions {\r\n  maxRetries: number\r\n  baseDelay: number\r\n  maxDelay: number\r\n  jitter: boolean\r\n}\r\n\r\nexport const DEFAULT_RETRY_OPTIONS: RetryOptions = {\r\n  maxRetries: 3,\r\n  baseDelay: 1000,\r\n  maxDelay: 10000,\r\n  jitter: true\r\n}\r\n\r\n/**\r\n * Check if an error is retryable\r\n */\r\nexport function isRetryableError(error: GatewayError): boolean {\r\n  // Rate limit errors are not retryable (wait for retry-after)\r\n  if (error instanceof GatewayRateLimitError) {\r\n    return false\r\n  }\r\n  \r\n  // Network errors are retryable\r\n  if (error.code === 'NETWORK_ERROR') {\r\n    return true\r\n  }\r\n  \r\n  // Upstream errors (502, 503, 504) are retryable\r\n  if (error instanceof GatewayUpstreamError) {\r\n    return true\r\n  }\r\n  \r\n  // 5xx errors are retryable\r\n  if (error.statusCode && error.statusCode >= 500) {\r\n    return true\r\n  }\r\n  \r\n  return false\r\n}\r\n\r\n/**\r\n * Calculate delay with exponential backoff and optional jitter\r\n */\r\nexport function calculateDelay(\r\n  attempt: number,\r\n  options: RetryOptions\r\n): number {\r\n  const delay = Math.min(\r\n    options.baseDelay * Math.pow(2, attempt),\r\n    options.maxDelay\r\n  )\r\n  \r\n  if (options.jitter) {\r\n    // Add ±25% jitter\r\n    const jitter = delay * 0.25 * (Math.random() - 0.5)\r\n    return Math.max(0, delay + jitter)\r\n  }\r\n  \r\n  return delay\r\n}\r\n\r\n/**\r\n * Sleep for a given number of milliseconds\r\n */\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms))\r\n}\r\n\r\n/**\r\n * Retry a function with exponential backoff\r\n */\r\nexport async function withRetry<T>(\r\n  fn: () => Promise<T>,\r\n  options: Partial<RetryOptions> = {}\r\n): Promise<T> {\r\n  const retryOptions = { ...DEFAULT_RETRY_OPTIONS, ...options }\r\n  let lastError: Error\r\n  \r\n  for (let attempt = 0; attempt <= retryOptions.maxRetries; attempt++) {\r\n    try {\r\n      return await fn()\r\n    } catch (error) {\r\n      lastError = error as Error\r\n      \r\n      // Don't retry on last attempt\r\n      if (attempt === retryOptions.maxRetries) {\r\n        throw error\r\n      }\r\n      \r\n      // Check if error is retryable\r\n      if (error instanceof GatewayError && !isRetryableError(error)) {\r\n        throw error\r\n      }\r\n      \r\n      // Calculate delay and wait\r\n      const delay = calculateDelay(attempt, retryOptions)\r\n      await sleep(delay)\r\n    }\r\n  }\r\n  \r\n  throw lastError!\r\n}\r\n","import fetch, { Headers, RequestInit, Response } from 'node-fetch'\r\nimport { createErrorFromResponse, GatewayError, GatewayTokenError } from './errors'\r\nimport { generateCorrelationId, extractCorrelationId } from './utils/correlation'\r\nimport { withRetry } from './utils/retry'\r\nimport { generateIdempotencyKey } from './utils/idempotency'\r\n\r\nexport interface GatewayClientOptions {\r\n  baseUrl: string\r\n  agentId: string\r\n  agentPrivateKeyPem: string\r\n  defaultIntent?: string\r\n  timeoutMs?: number\r\n}\r\n\r\nexport interface TokenOptions {\r\n  tools: string[]\r\n  permissions: string[]\r\n  ttlMinutes: number\r\n}\r\n\r\nexport interface TokenResponse {\r\n  agent_token: string\r\n}\r\n\r\nexport interface ProxyResponse<T = any> {\r\n  success: boolean\r\n  data: T\r\n  metadata: {\r\n    agent_id: string\r\n    agent_name: string\r\n    tool: string\r\n    action: string\r\n    response_time_ms: number\r\n  }\r\n}\r\n\r\nexport interface AsyncProxyResponse {\r\n  job_id: string\r\n}\r\n\r\nexport interface JobResponse {\r\n  status: 'queued' | 'running' | 'done' | 'failed'\r\n  result?: any\r\n  error?: string\r\n}\r\n\r\nexport class GatewayClient {\r\n  private baseUrl: string\r\n  private agentId: string\r\n  private agentPrivateKeyPem: string\r\n  private defaultIntent?: string\r\n  private timeoutMs: number\r\n  private currentIntent: string\r\n\r\n  constructor(options: GatewayClientOptions) {\r\n    this.baseUrl = options.baseUrl.replace(/\\/$/, '') // Remove trailing slash\r\n    this.agentId = options.agentId\r\n    this.agentPrivateKeyPem = options.agentPrivateKeyPem\r\n    this.defaultIntent = options.defaultIntent\r\n    this.timeoutMs = options.timeoutMs || 6000\r\n    this.currentIntent = options.defaultIntent || ''\r\n  }\r\n\r\n  /**\r\n   * Set the current intent for requests\r\n   */\r\n  setIntent(intent: string): void {\r\n    this.currentIntent = intent\r\n  }\r\n\r\n  /**\r\n   * Get a new token from the Gateway\r\n   */\r\n  async getToken(opts: TokenOptions): Promise<string> {\r\n    const expiresAt = new Date(Date.now() + opts.ttlMinutes * 60 * 1000).toISOString()\r\n    \r\n    const response = await this.makeRequest('/api/generate-token', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        agent_id: this.agentId,\r\n        tools: opts.tools,\r\n        permissions: opts.permissions,\r\n        expires_at: expiresAt\r\n      })\r\n    })\r\n\r\n    const data = await response.json() as TokenResponse\r\n    return data.agent_token\r\n  }\r\n\r\n  /**\r\n   * Make a proxied request through the Gateway\r\n   */\r\n  async proxy<T = any>(\r\n    tool: string,\r\n    action: string,\r\n    params: Record<string, any>,\r\n    agentToken?: string,\r\n    proofPayloadOverride?: object\r\n  ): Promise<T> {\r\n    // Auto-fetch token if not provided\r\n    let token = agentToken\r\n    if (!token) {\r\n      token = await this.getToken({\r\n        tools: [tool],\r\n        permissions: ['read', 'write'],\r\n        ttlMinutes: 10\r\n      })\r\n    }\r\n\r\n    // Check token age (reject if older than 24h)\r\n    if (token) {\r\n      const tokenAge = this.getTokenAge(token)\r\n      if (tokenAge > 24 * 60 * 60 * 1000) { // 24 hours\r\n        throw new GatewayTokenError('Token is too old (older than 24h)')\r\n      }\r\n    }\r\n\r\n    const body: any = {\r\n      agent_token: token,\r\n      tool,\r\n      action,\r\n      params\r\n    }\r\n\r\n    // Add intent if set\r\n    if (this.currentIntent) {\r\n      body.intent = this.currentIntent\r\n    }\r\n\r\n    // Add proof payload override if provided\r\n    if (proofPayloadOverride) {\r\n      body.proof_payload = JSON.stringify(proofPayloadOverride)\r\n    }\r\n\r\n    const response = await this.makeRequest('/api/proxy-request', {\r\n      method: 'POST',\r\n      body: JSON.stringify(body)\r\n    })\r\n\r\n    const data = await response.json() as ProxyResponse<T>\r\n    \r\n    // Check for token rotation recommendation\r\n    const rotationRecommended = response.headers.get('X-Token-Rotation-Recommended')\r\n    const tokenExpiresAt = response.headers.get('X-Token-Expires-At')\r\n    \r\n    if (rotationRecommended === 'true') {\r\n      console.warn(`Token rotation recommended! Expires: ${tokenExpiresAt}`)\r\n    }\r\n\r\n    return data.data\r\n  }\r\n\r\n  /**\r\n   * Make an async proxy request\r\n   */\r\n  async proxyAsync(\r\n    tool: string,\r\n    action: string,\r\n    params: Record<string, any>,\r\n    agentToken?: string\r\n  ): Promise<{ jobId: string }> {\r\n    // Auto-fetch token if not provided\r\n    let token = agentToken\r\n    if (!token) {\r\n      token = await this.getToken({\r\n        tools: [tool],\r\n        permissions: ['read', 'write'],\r\n        ttlMinutes: 10\r\n      })\r\n    }\r\n\r\n    const body: any = {\r\n      agent_token: token,\r\n      tool,\r\n      action,\r\n      params,\r\n      async: true\r\n    }\r\n\r\n    // Add intent if set\r\n    if (this.currentIntent) {\r\n      body.intent = this.currentIntent\r\n    }\r\n\r\n    const response = await this.makeRequest('/api/proxy-request', {\r\n      method: 'POST',\r\n      body: JSON.stringify(body)\r\n    })\r\n\r\n    const data = await response.json() as AsyncProxyResponse\r\n    return { jobId: data.job_id }\r\n  }\r\n\r\n  /**\r\n   * Get job status and result\r\n   */\r\n  async getJob(jobId: string): Promise<JobResponse> {\r\n    const response = await this.makeRequest(`/api/jobs/${jobId}`, {\r\n      method: 'GET'\r\n    })\r\n\r\n    return await response.json() as JobResponse\r\n  }\r\n\r\n  /**\r\n   * Make an HTTP request with retry logic and error handling\r\n   */\r\n  private async makeRequest(\r\n    path: string,\r\n    options: RequestInit = {}\r\n  ): Promise<Response> {\r\n    const url = `${this.baseUrl}${path}`\r\n    const correlationId = generateCorrelationId()\r\n\r\n    const requestOptions: RequestInit = {\r\n      ...options,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Correlation-Id': correlationId,\r\n        'User-Agent': '@4runr/gateway/1.0.0',\r\n        ...options.headers\r\n      },\r\n      signal: AbortSignal.timeout(this.timeoutMs)\r\n    }\r\n\r\n    return withRetry(async () => {\r\n      try {\r\n        const response = await fetch(url, requestOptions)\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json().catch(() => ({ error: 'Unknown error' })) as { error?: string }\r\n          const retryAfter = response.headers.get('Retry-After')\r\n          \r\n          throw createErrorFromResponse(\r\n            response.status,\r\n            errorData.error || `HTTP ${response.status}`,\r\n            retryAfter || undefined\r\n          )\r\n        }\r\n\r\n        return response\r\n      } catch (error) {\r\n        if (error instanceof GatewayError) {\r\n          throw error\r\n        }\r\n        \r\n        if (error instanceof Error) {\r\n          throw new GatewayError(\r\n            `Network error: ${error.message}`,\r\n            undefined,\r\n            'NETWORK_ERROR'\r\n          )\r\n        }\r\n        \r\n        throw error\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get token age in milliseconds\r\n   */\r\n  private getTokenAge(token: string): number {\r\n    try {\r\n      // Extract timestamp from token (assuming it's in the format we expect)\r\n      // This is a simplified implementation - in practice, you'd decode the JWT\r\n      const parts = token.split('.')\r\n      if (parts.length >= 2) {\r\n        const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString())\r\n        if (payload.iat) {\r\n          return Date.now() - (payload.iat * 1000)\r\n        }\r\n      }\r\n    } catch {\r\n      // If we can't parse the token, assume it's recent\r\n    }\r\n    return 0\r\n  }\r\n\r\n  /**\r\n   * Mask sensitive parameters in logs\r\n   */\r\n  private maskParams(params: Record<string, any>): Record<string, any> {\r\n    const masked = { ...params }\r\n    const sensitiveKeys = ['password', 'token', 'key', 'secret', 'api_key']\r\n    \r\n    for (const key of sensitiveKeys) {\r\n      if (masked[key]) {\r\n        masked[key] = '***MASKED***'\r\n      }\r\n    }\r\n    \r\n    return masked\r\n  }\r\n}\r\n","import { randomUUID } from 'crypto'\r\n\r\n/**\r\n * Generate a unique idempotency key\r\n */\r\nexport function generateIdempotencyKey(): string {\r\n  return `idemp_${Date.now()}_${randomUUID()}`\r\n}\r\n\r\n/**\r\n * Generate idempotency key from request data\r\n */\r\nexport function generateIdempotencyKeyFromData(\r\n  tool: string,\r\n  action: string,\r\n  params: Record<string, any>\r\n): string {\r\n  const dataString = JSON.stringify({ tool, action, params })\r\n  const hash = require('crypto').createHash('sha256').update(dataString).digest('hex')\r\n  return `idemp_${hash.substring(0, 16)}`\r\n}\r\n"]}