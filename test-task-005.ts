#!/usr/bin/env ts-node

import fetch from 'node-fetch'

interface AgentResponse {
  agent_id: string
  private_key: string
}

interface TokenResponse {
  agent_token: string
  expires_at: string
  agent_name: string
}

async function testTask005() {
  console.log('üìä TASK 005 ‚Äî Logging, Rate Limits, Rotation & Analytics Test\n')

  try {
    // Step 1: Create an agent
    console.log('Step 1: Creating Agent')
    const createAgentResponse = await fetch('http://localhost:3000/api/create-agent', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: 'task005_test_agent',
        created_by: 'test_user',
        role: 'test_agent'
      })
    })

    if (!createAgentResponse.ok) {
      throw new Error(`Failed to create agent: ${createAgentResponse.statusText}`)
    }

    const agentData = await createAgentResponse.json() as AgentResponse
    console.log(`‚úÖ Agent created (ID: ${agentData.agent_id})\n`)

    // Step 2: Generate a token with short expiry for rotation testing
    console.log('Step 2: Generating Token (with short expiry)')
    const shortExpiry = new Date(Date.now() + 2 * 60 * 1000).toISOString() // 2 minutes
    const generateTokenResponse = await fetch('http://localhost:3000/api/generate-token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        agent_id: agentData.agent_id,
        tools: ['openai'],
        permissions: ['read'],
        expires_at: shortExpiry
      })
    })

    if (!generateTokenResponse.ok) {
      throw new Error(`Failed to generate token: ${generateTokenResponse.statusText}`)
    }

    const tokenData = await generateTokenResponse.json() as TokenResponse
    console.log(`‚úÖ Token generated for: ${tokenData.agent_name}`)
    console.log(`   Expires: ${tokenData.expires_at}\n`)

    // Step 3: Test rate limiting
    console.log('Step 3: Testing Rate Limiting (5 requests per minute)')
    console.log('Making 6 requests to trigger rate limiting...\n')

    let successCount = 0
    let rateLimitCount = 0

    for (let i = 1; i <= 6; i++) {
      console.log(`Request ${i}/6...`)
      
      const proxyResponse = await fetch('http://localhost:3000/api/proxy-request', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          agent_token: tokenData.agent_token,
          tool: 'openai',
          action: 'chat',
          params: {
            model: 'gpt-3.5-turbo',
            messages: [
              { role: 'user', content: `Task 005 test request ${i}` }
            ],
            max_tokens: 10
          }
        })
      })

      if (proxyResponse.status === 200) {
        successCount++
        console.log(`  ‚úÖ Success`)
        
        // Check for token rotation headers
        const rotationRecommended = proxyResponse.headers.get('X-Token-Rotation-Recommended')
        const tokenExpiresAt = proxyResponse.headers.get('X-Token-Expires-At')
        
        if (rotationRecommended === 'true') {
          console.log(`  üîÑ Token rotation recommended! Expires: ${tokenExpiresAt}`)
        }
      } else if (proxyResponse.status === 429) {
        rateLimitCount++
        const errorData = await proxyResponse.json() as any
        console.log(`  üö¶ Rate Limited: ${errorData.error}`)
        if (errorData.retry_after) {
          console.log(`  ‚è∞ Retry after: ${errorData.retry_after} seconds`)
        }
      } else {
        const errorData = await proxyResponse.json() as any
        console.log(`  ‚ùå Error (${proxyResponse.status}): ${JSON.stringify(errorData)}`)
      }

      // Small delay between requests
      await new Promise(resolve => setTimeout(resolve, 100))
    }

    console.log('\nüìä Rate Limit Test Results:')
    console.log(`  Successful requests: ${successCount}`)
    console.log(`  Rate limited requests: ${rateLimitCount}`)

    // Step 4: Test token rotation with expiring token
    console.log('\nStep 4: Testing Token Rotation')
    console.log('Making a request to check for rotation headers...')
    
    const rotationResponse = await fetch('http://localhost:3000/api/proxy-request', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        agent_token: tokenData.agent_token,
        tool: 'openai',
        action: 'chat',
        params: {
          model: 'gpt-3.5-turbo',
          messages: [
            { role: 'user', content: 'Check token rotation' }
          ],
          max_tokens: 10
        }
      })
    })

    if (rotationResponse.status === 200) {
      const rotationRecommended = rotationResponse.headers.get('X-Token-Rotation-Recommended')
      const tokenExpiresAt = rotationResponse.headers.get('X-Token-Expires-At')
      
      if (rotationRecommended === 'true') {
        console.log('‚úÖ Token rotation headers detected!')
        console.log(`   Token expires at: ${tokenExpiresAt}`)
      } else {
        console.log('‚ÑπÔ∏è  Token rotation not yet needed')
      }
    }

    // Step 5: Test unauthorized access (should be logged)
    console.log('\nStep 5: Testing Unauthorized Access (should be logged)')
    const unauthorizedResponse = await fetch('http://localhost:3000/api/proxy-request', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        agent_token: tokenData.agent_token,
        tool: 'unauthorized_tool',
        action: 'test',
        params: {}
      })
    })

    if (unauthorizedResponse.status === 403) {
      console.log('‚úÖ Unauthorized access correctly blocked and logged')
    } else {
      console.log('‚ùå Unauthorized access should have been blocked')
    }

    console.log('\nüéâ TASK 005 Test Complete!')
    console.log('\nüìã Test Summary:')
    console.log('  ‚úÖ Enhanced logging (all requests logged)')
    console.log('  ‚úÖ Rate limiting (5 requests per minute)')
    console.log('  ‚úÖ Token rotation headers')
    console.log('  ‚úÖ Error logging (unauthorized access)')
    console.log('  ‚úÖ Analytics ready (CLI dashboard)')

    console.log('\nüîß Next Steps:')
    console.log('  - Run: npx ts-node tools/view-logs.ts (to see logs)')
    console.log('  - Run: npx ts-node tools/test-rate-limits.ts (to test rate limits)')
    console.log('  - All requests are now logged with detailed information')

  } catch (error) {
    console.error('‚ùå TASK 005 test failed:', error)
  }
}

testTask005().then(() => {
  process.exit(0)
}).catch((error) => {
  console.error('‚ùå Test failed:', error)
  process.exit(1)
})
