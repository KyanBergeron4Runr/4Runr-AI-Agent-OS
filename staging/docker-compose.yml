version: "3.9"

services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: gateway
      POSTGRES_PASSWORD: ${DB_PASSWORD:-STRONGPASS}
      POSTGRES_DB: gateway
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gateway -d gateway"]
      interval: 10s
      timeout: 3s
      retries: 20
    networks:
      - gateway-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:-redispass}"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispass}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 20
    networks:
      - gateway-network

  gateway:
    image: 4runr/gateway:staging
    restart: unless-stopped
    build: 
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      NODE_ENV: production
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispass}@redis:6379
    ports:
      - "127.0.0.1:3000:3000"   # Only loopback, exposed via nginx TLS
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    volumes:
      - ./secrets/4runr-secrets.json:/run/secrets/4runr-secrets.json:ro
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/ready"]
      interval: 10s
      timeout: 3s
      retries: 12
    networks:
      - gateway-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local

networks:
  gateway-network:
    driver: bridge
    internal: true  # No external access
